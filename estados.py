#program
#text='.  ”begin” .  (  . ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) .  | .  ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  "[" .  "]" .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) .  ";" . ) .  | .  ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  "Function" .  "(" .  [ . ( . ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) . ) .  { . ";" .  ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) . ) . } . ) . ] .  ")" .  statement . ) . ) .  { . ";" .  ( . ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) .  | .  ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  "[" .  "]" .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) .  ";" . ) .  | .  ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  "Function" .  "(" .  [ . ( . ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) . ) .  { . ";" .  ( . ( . "float" .  | .  "int" .  | .  "string" .  | .  "void" .  | .  "bool" .  | .  "char" . ) .  ( . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  { . "," .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) . } . ) . ) . } . ) . ] .  ")" .  statement . ) . ) . } .  “end” .'

#statement
#text=' .(.[.(.{.(."Identifier".[."["."Integer-Number"."]".].)."=".}.(.(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).{."|".(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).}.).).].";".).|.(."{".{.(.(."float".|."int".|."string".|."void".|."bool".|."char".).(.(."Identifier".[."["."Integer-Number"."]".].).{.",".(."Identifier".[."["."Integer-Number"."]".].).}.).|.(."float".|."int".|."string".|."void".|."bool".|."char".)."["."]".(.(."Identifier".[."["."Integer-Number"."]".].).{.",".(."Identifier".[."["."Integer-Number"."]".].).}.).";".).}.{.statement.}."}".).|.(."if"."(".(.{.(."Identifier".[."["."Integer-Number"."]".].)."=".}.(.(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).{."|".(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).}.).).")".statement.[."else".statement.].).|.(."while"."(".(.{.(."Identifier".[."["."Integer-Number"."]".].)."=".}.(.(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).{."|".(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).}.).).")".statement.).|.(."return".[.(.{.(."Identifier".[."["."Integer-Number"."]".].)."=".}.(.(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).{."|".(.(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).{."&".(.{."!".}.(.(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).[.(."=".|.">".|.">=".|."<".|."<=".|."==".|."!=".|."#".).(.(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).{.(."+".|."-".).(.(.{."-".}.factor.).{.(."*".|."/".).(.{."-".}.factor.).}.).}.).].).).}.).}.).).].";".).|.(."break".";".).'

#factor
#text='.  "(" .  ( . { . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  "=" . } .  ( . ( . ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) .  { . "&" .  ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) . } . ) .  { . "|" .  ( . ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) .  { . "&" .  ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) . } . ) . } . ) . ) .  ")" .    | .  ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  | .  ( . "Function" .  "(" .  [ . factor .  { . "," .  ( . { . ( . "Identifier" .  [ . "[" .  "Integer-Number" .  "]" . ] . ) .  "=" . } .  ( . ( . ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  |  .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) .  { . "&" .  ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . )  . { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) . } . ) .  { . "|" .  ( . ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) .  { . "&" .  ( . { . "!" . } .  ( .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) .  [ . ( . "=" .  | .  ">" .  | .  ">=" .  | .  "<" .  | .  "<=" .  | .  "==" .  | .  "!=" .  | .  "#" . ) .  ( . ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) .  { . ( . "+" .  | .  "-" . ) .  ( . ( . { . "-" . } .  factor . ) .  { . ( . "*" .  | .  "/" . ) .  ( . { . "-" . } .  factor . ) . } . ) . } . ) . ] . ) . ) . } . ) . } . ) . ) . } . ] .  ")" . ) .  | .  ( . ( . "Integer-Number" .  | .  "Float-Number" . ) .  | .  ( . "Constant-String" .  | .  "Character" . ) .  | .  "true" .  | .  "false" . ) .'

#example
text = '.(.(.{."{"."{"."}"."a".";"."b"."}".}.).(."c".|.A.(."a".|."b".).).).|.[."a".|."b".].{."b"."c".|.A.|.B.}.'

text = text.replace(" ","")

j = 0
open = 0
open_key=0
open_or =0
a = ""
b = ""
up = False
last_state =0
#for i in range(9999):
while(True):
   # print(text)
    up = False
    if '.' not in text:
        break
    #verify or statement
    if open==0 or open==1:
        
        for idx, item in enumerate(text):
            if (item== '(' or item =='[' or item=='{') and (text[idx + 1]=='.'):
                open_or +=1
                
            elif (item == ')' or item == ']' or item == '}' ) and (text[idx + 1]=='.'):
                open_or -=1   
                if open_or < 0:
                    open_or=0
                    break
            elif item =='|':
                if (open_or==0) and (text[idx + 1]=='.'):
                    if open ==0:
                        text = text[:idx+1] + str(last_state) + text[idx + 2:]
                    elif open==1:
                        text = text[:idx+1] + str(last_state) + text[idx + 2:]
                    up = True   
                    break
        if up== True:
            continue
   
    for idx, item in enumerate(text):
        
        if item == '.':
            if open == 0:
                
                text = text[:idx] + str(j) + text[idx + 1:]
                last_state= str(j)
                j = j+1
                break
        else:
            if (item== '(' or item =='[') and (text[idx + 1]=='.'):
                open +=1
                if open== 1:
                    val=0
                    for i in range(30):
                        if text[idx-i-1].isdigit():
                            val*=10   
                            val+= ord(text[idx-i-1]) - ord('0')
                            #print(val)                        
                        else:
                            break
                    text = text[:idx+1] + str(val)[::-1] + text[idx + 2:]
                    last_state=str(val)[::-1]
                    
                    break
            elif (item == ')' or item == ']' ) and (text[idx + 1]=='.'):
                open -=1      
            elif item =='{' and (text[idx + 1]=='.') and open==0:   
                text = text[:idx+1] + str(j) + text[idx + 2:]
                last_state= str(j)
                for idx2, item2 in enumerate(text[idx+1:]):
                    
                    if item2 == '{' and (text[idx2]!='.'):
                        print(text)
                        print(text[idx2])
                        open_key+=1
                    elif item2 =='}' and   (text[idx2]!='.'):
                        open_key-=1
                        if open_key == -1:
                            text = text[:idx+idx2+2] + str(j) + text[idx+idx2 + 3:]
                            last_state= str(j)
                            j+=1
                        break
                break
print(text)

#."a" ."b" .(."c".|.A.(."a" .| ."b".).).|.[."a".|."b".].{."b"."c".|.A.|.B.}.

#2:01 -- completo
#1:46 -- regras